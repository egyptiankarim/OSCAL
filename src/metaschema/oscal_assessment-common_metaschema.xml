<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../build/metaschema/toolchains/xslt-M4/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/toolchains/xslt-M4/validate/metaschema.xsd"
            abstract="yes">
   <schema-name>OSCAL Assessment Layer Format -- Common Modules</schema-name>
   <schema-version>1.0.0-milestone3</schema-version>
   <short-name>oscal-assessment-common</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <remarks>
      <p>This contains all modules common to the assessment plan, assessment results, and POAM models. </p>
      <p>The root of the OSCAL Assessment Plan format is <code>assessment-plan</code>.</p>
      <p>The root of the OSCAL Assessment Results format is <code>assessment-results</code>.</p>
      <p>The root of the OSCAL Plan of Action and Milestones (POA&amp;M) format is <code>plan-of-action-and-milestones</code>.</p>
   </remarks>
   <!-- IMPORT STATEMENTS -->
   <import href="oscal_control-common_metaschema.xml"/>
   
   <import href="oscal_implementation-common_metaschema.xml"/>
  <!--   <import href="oscal_metadata_metaschema.xml"/>-->
   <!-- SSP Import -->
   <define-assembly name="import-ssp">
      <formal-name>Import System Security Plan</formal-name>
      <description>Used by the assessment plan and POA&amp;M to import information about the system.</description>
      <define-flag name="href" required="yes" as-type="uri-reference">
         <formal-name>System Security Plan Reference</formal-name>
         <description>>A resolvable URL reference to the system security plan for the system being assessed.</description>
         <remarks>
            <p>The value of the <code>href</code> can be an internet resource, or a local reference using a fragment e.g. #fragment that points to a <code>back-matter</code> <code>resource</code> in the same document.</p>
            <!-- TODO: Add a link to "within the scope of the containing OSCAL document" to point to documentation of identification scopes" -->
            <p>If a local reference using a fragment is used, this will be indicated by a fragment "#" followed by an identifier which references an identified <code>resource</code> in the document's <code>back-matter</code> or another object that is within the scope of the containing OSCAL document.</p>
            <p>If an internet resource is used, the <code>href</code> value will be an absolute or relative URI pointing to the location of the referenced resource. A relative URI will be resolved relative to the location of the document containing the link.</p>
         </remarks>
      </define-flag>
         
      <model>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>

   <!-- ********** OBJECTIVES Assembly ********** -->
   <define-assembly name="objectives">
      <formal-name>Control Objectives</formal-name>
      <description>Identifies the controls being assessed and their control objectives. In the assessment plans, these are the planned controls and objectives. In the assessment results, these are the actual controls and objectives, reflecting any changes from the plan.</description>
      <model>
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Control Objective Description</formal-name>
            <description>A human-readable description of control objectives.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="controls" min-occurs="1" max-occurs="unbounded">
            <group-as name="control-group" in-json="ARRAY"/>
         </assembly>
         <assembly ref="control-objectives" min-occurs="0" max-occurs="unbounded">
            <group-as name="control-objective-group" in-json="ARRAY"/>
         </assembly>
         <assembly ref="objective" min-occurs="0" max-occurs="unbounded">
            <group-as name="objectives" in-json="ARRAY"/>
         </assembly>
         <assembly ref="method" min-occurs="0" max-occurs="unbounded">
            <group-as name="method-definitions" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="controls">
      <formal-name>Assessed Controls</formal-name>
      <description>Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.</description>
      <model>
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Assessed Controls Description</formal-name>
            <description>A human-readable description of in-scope controls specified for assessment.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <define-field name="include-control" min-occurs="0" max-occurs="unbounded">
            <formal-name>Include Control</formal-name>
            <description>Identifies an individual control to include.</description>
            <!-- QUESTION: What is the field value for? -->
            <group-as name="include-controls" in-json="ARRAY"/>
            <flag ref="control-id" required="yes"/>
         </define-field>
         <define-field name="exclude-control" min-occurs="0" max-occurs="unbounded">
            <formal-name>Exclude Control</formal-name>
            <description>Identifies an individual control to exclude.</description>
            <!-- QUESTION: What is the field value for? -->
            <group-as name="exclude-controls" in-json="ARRAY"/>
            <flag ref="control-id" required="yes"/>
         </define-field>

         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="control-objectives">
      <formal-name>Referened Control Objectives</formal-name>
      <description>Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the actual objectives, and reflects any changes from the plan.</description>
      <model>
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Control Ojectives Description</formal-name>
            <description>A human-readable description of this collection of control objectives.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <define-field name="include-objective" min-occurs="0" max-occurs="unbounded">
            <formal-name>Include Objective</formal-name>
            <description>Identifies an individual control objective to include.</description>
            <!-- QUESTION: What is the field value for? -->
            <group-as name="include-objectives" in-json="ARRAY"/>
            <flag ref="objective-id" required="yes"/>
         </define-field>
         <define-field name="exclude-objective" min-occurs="0" max-occurs="unbounded">
            <formal-name>Exclude Objective</formal-name>
            <description>Identifies an individual control objective to exclude.</description>
            <!-- QUESTION: What is the field value for? -->
            <group-as name="exclude-objectives" in-json="ARRAY"/>
            <flag ref="objective-id" required="yes"/>
         </define-field>

         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>

   <define-assembly name="objective">
      <formal-name>Assessment-specific Control Objective</formal-name>
      <description>A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.</description>
      <define-flag name="id" required="yes" as-type="NCName" >
         <formal-name>Control Objective Identifier</formal-name>
         <description>A unique identifier for the assessment-specific control objective instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.</description>
         <remarks>
            <p>In the catalog, control objectives use ID, not UUID. This is the primary source of control objectives relative to an assessment.</p>
            <p>While rare, control-objectives may also be defined locally within the assessment-plan and assessment-results models</p>
            <p>ID is used to ensure consistent syntax from referencing fields/flags, whether referencing catalog-defined or locally-defined objectives.</p>
         </remarks>
      </define-flag>
      <flag ref="control-id" required="yes"/>
      <model>
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Objective Description</formal-name>
            <description>A human-readable description of this control objective.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="assessment-part" min-occurs="1" max-occurs="1"/>
         <define-field name="assessment-method" min-occurs="0" max-occurs="unbounded" as-type="string"> 
            <formal-name>Assessment Method</formal-name>
            <description>Identifies a method for assessing the satisfaction of this objective.</description>
            <!-- QUESTION: What is the field value for? -->
            <group-as name="methods" in-json="ARRAY"/>
            <define-flag name="method-uuid" required="yes" as-type="uuid">
               <formal-name>Method ID</formal-name>
               <description>Identifies the assessment method by its UUID value.</description>
            </define-flag>
         </define-field>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="method">
      <formal-name>Assessment Method</formal-name>
      <description>A local definition of a control objective. Uses catalog syntax for control objective and assessment actions.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Assessment Method Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this defined assessment method. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given assessment method across revisions of the document.</description>
      </define-flag>
      <model>
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Assessment Method Description</formal-name>
            <description>A human-readable description of this assessment method.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="assessment-part" min-occurs="1" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <!-- ********** ASSESSMENT SUBJECT Assembly ********** -->
   <define-assembly name="include-subject">
      <formal-name>Included Assessment Subject</formal-name>
      <description>Identifies exactly what will be the focus of this assessment. Anything not explicitly defined is out-of-scope.</description>
      <define-flag name="name" required="yes">
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Person to Interview</enum>
               <enum value="user">User</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="class" as-type="NCName">
         <formal-name>Subject Class</formal-name>
         <description>A textual label that provides a sub-type or characterization of the <code>include-subject</code>. This can be used to further distinguish or discriminate between the semantics of multiple include-subjects of the same <code>ns</code>.</description>
         <remarks>
            <p>A <code>class</code> can be used in validation rules to express extra constraints over named items of a specific <code>class</code> value.</p>
         </remarks>
      </define-flag>
      <model>
         <define-field name="description"  min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Include Subjects Description</formal-name>
            <description>A human-readable description of the collection of subjects being included in this assessment.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="exclude-subject">
      <formal-name>Excluded Assessment Subject</formal-name>
      <description>Identifies what is explicitly excluded from this assessment. Used to remove a subset of items from groups of explicitly included items. Also used to explicitly clarify off-limit items, such as hosts to avoid scanning.</description>
      <define-flag name="name" required="yes">
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Person to Avoid Interviewing</enum>
               <enum value="user">User</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="class" as-type="NCName">
         <formal-name>Subject Class</formal-name>
         <description>A textual label that provides a sub-type or characterization of the <code>exclude-subject</code>. This can be used to further distinguish or discriminate between the semantics of multiple exclude-subjects of the same <code>ns</code>.</description>
         <remarks>
            <p>A <code>class</code> can be used in validation rules to express extra constraints over named items of a specific <code>class</code> value.</p>
         </remarks>
      </define-flag>
      <model>
         <define-field name="description"  min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Exclude Subjects Description</formal-name>
            <description>A human-readable description of the collection of subjects being excluded from this assessment.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="subject-reference">
      <formal-name>Identifies the Subject</formal-name>
      <description>A pointer to a resource based on its ID. Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.</description>
      <define-flag name="uuid-ref" required="yes">
         <formal-name>UUID Reference</formal-name>
         <description>A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.</description>
      </define-flag>
      <define-flag name="type" required="yes">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Interview Party</enum>
               <enum value="user">User</enum>
               <enum value="resource">Resource or Artifact</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Subject Reference Title</formal-name>
            <description>The title or name for the referenced subject.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <!-- CHANGE: props to properties -->
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
      <remarks>
         <p>The subject reference UUID could point to an item defined in the SSP, AP, or AR.</p>
         <p>Tools should check look for the ID in every file imported directly or indirectly.</p>
      </remarks>
   </define-assembly>
   <define-field name="all">
      <formal-name>All</formal-name>
      <description>A key word to indicate all </description>
   </define-field>
   <!-- ********** ASSET Assembly ********** -->
   <define-assembly name="assets">
      <formal-name>Assessment Assets</formal-name>
      <description>Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.</description>
      <model>
         <assembly ref="tools" min-occurs="0" max-occurs="1"/>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="assessment-part" min-occurs="0" max-occurs="unbounded">
            <group-as name="parts" in-json="ARRAY"/>
            <remarks>
               <p>Provided to allow content such as assumptions and disclosures.</p>
            </remarks>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="tools">
      <formal-name>Assessment Assets</formal-name>
      <description>The technology tools used by the assessor to perform the assessment, such as vulnerability scanners. In the assessment plan these are the intended tools. In the assessment results, these are the actual tools used, including any differences from the assessment plan.</description>
      <model>
         <assembly ref="system-component" min-occurs="0" max-occurs="unbounded">
            <use-name>component</use-name>
            <group-as name="components" in-json="BY_KEY"/>
         </assembly>
      </model>
   </define-assembly>
   
   <define-assembly name="origination">
      <formal-name>Assessment Origination</formal-name>
      <description>Identifies the origination of network-based assessment activities, such as the IP address of the tool performing assessment scans.</description>
      <model>
         <define-field name="title" min-occurs="1" max-occurs="1" as-type="markup-line">
            <formal-name>Oritination Title</formal-name>
            <description>The title or name for this assessment origination item.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description-->
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Origination Description</formal-name>
            <description>A human-readable description of assessment originiation asset.</description>
         </define-field>
         <field ref="property"  max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
      </model>
      <constraint>
         <allowed-values target="prop/@name">
            <enum value="ipv4-address">Internet Protocol Address (Version 4)</enum>
            <enum value="ipv6-address">Internet Protocol Address (Version 6)</enum>
            <enum value="fqdn">Fully Qualified Domain Name</enum>
         </allowed-values>
      </constraint>
   </define-assembly>
   
   <!-- ********** ASSESSMENT ACTIVITIES Assembly ********** -->
   <define-assembly name="assessment-activities">
      <formal-name>Assessment Activities</formal-name>
      <description>Identifies the assessment activities and schedule. In the assessment plan, these are planned activities. In the assessment results, these are the actual activities performed.</description>
      <model>
         <assembly ref="test-method" min-occurs="0" max-occurs="unbounded">
            <group-as name="test-methods" in-json="ARRAY"/>
         </assembly>
         <assembly ref="schedule" min-occurs="0" max-occurs="1"/>
         <assembly ref="include-activity" min-occurs="0" max-occurs="unbounded">
            <group-as name="include-activities" in-json="ARRAY"/>
         </assembly>
         <assembly ref="exclude-activity" min-occurs="0" max-occurs="unbounded">
            <group-as name="exclude-activities" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="test-method">
      <formal-name>Test Method</formal-name>
      <description>Identifies an individual test method.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Test Method Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this defined test method. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given test method across revisions of the document.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Test Method Title</formal-name>
            <description>The title or name for this test method.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Test Method Description</formal-name>
            <description>A human-readable description of this test method and collection of test steps.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="test-step" min-occurs="0" max-occurs="unbounded">
            <group-as name="test-steps" in-json="ARRAY"/>
         </assembly>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-field name="compare-to" as-type="string">
      <formal-name>Compare To</formal-name>
      <description>Typically used in when copying content from the assessment plan to the assessment results. The uuid should be changed in the assessment results file, and the compare-to field should be set to the original assessment plan uuid value. This enables the plan and results to be compared later to identify what changed between the two.</description>
   </define-field>
   
   <define-assembly name="test-step">
      <formal-name>Test Steps</formal-name>
      <description>Identifies an individual test step.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Test Step Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this defined test step. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given test step across revisions of the document.</description>
      </define-flag>
      <model>
         <field ref="sequence" min-occurs="0" max-occurs="1"/>
         <define-field name="description" min-occurs="1" max-occurs="1" as-type="markup-multiline">
            <formal-name>Test Steps Description</formal-name>
            <description>A human-readable description of this test step.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="role-id" min-occurs="0" max-occurs="unbounded">
            <group-as name="role-ids" in-json="ARRAY"/>
         </field>
         <field ref="party-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="party-uuids" in-json="ARRAY"/>
         </field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="sequence" as-type="integer">
      <formal-name>Sequence Number</formal-name>
      <description>Identifies the sequence number for the test step.</description>
   </define-field>
   
   <define-assembly name="schedule">
      <formal-name>Schedule</formal-name>
      <description>Identifies the schedule for the assessment activities.</description>
      <define-flag name="uuid" required="no" as-type="uuid">
         <formal-name>Schedule Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this schedule. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.</description>
      </define-flag>
      <model>
         <assembly ref="task" min-occurs="1" max-occurs="unbounded">
            <group-as name="tasks" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   
   <define-assembly name="task">
      <formal-name>Task</formal-name>
      <description>Identifies an individual task.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Task Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this defined task. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given task across revisions of the document.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Task Title</formal-name>
            <description>The title for this task.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" as-type="markup-multiline">
            <formal-name>Task Description</formal-name>
            <description>A human-readable description of this task.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="start" min-occurs="0" max-occurs="1"/>
         <field ref="end" min-occurs="0" max-occurs="1"/>
         <field ref="activity-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="activity-uuids" in-json="ARRAY"/>
         </field>
         <define-field name="role-id" as-type="NCName" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with performing this task.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with performing this task.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with performing this task.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="start" as-type="dateTime-with-timezone">
      <formal-name>Start</formal-name>
      <description>Identifies the start of a task.</description>
   </define-field>
   <define-field name="end" as-type="dateTime-with-timezone">
      <formal-name>End</formal-name>
      <description>Identifies the end of a task.</description>
   </define-field>
   <define-field name="activity-uuid" as-type="uuid">
      <formal-name>Activity ID</formal-name>
      <description>Links the task to a defined activity.</description>
   </define-field>
   
   <define-assembly name="include-activity">
      <formal-name>Included Activity</formal-name>
      <description>Identifies an assessment activity. In the assessment plan, this is an intended/in-scope activity. In the assessment results, this identifies an activity that was actually performed.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Included Activity Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this included activity. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given included activity across revisions of the document.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Included Activity Title</formal-name>
            <description>The title for this included activity.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Included Activity Description</formal-name>
            <description>A human-readable description of this included activity.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <define-field name="role-id" as-type="NCName" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with performing this activity.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with performing this activity.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with performing this activity.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="exclude-activity">
      <formal-name>Included Activity</formal-name>
      <description>Identifies an activity explicitly excluded from the assessment. In the assessment plan, this clarifies activities that are out-of-scope or prohibited. In the assessment results, this could be used to explicitly identify an activity that was planned, but not performed.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Excluded Activity Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this excluded activity. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given excluded activity across revisions of the document.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Excluded Activity Title</formal-name>
            <description>The title for this excluded activity.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Excluded Activity Description</formal-name>
            <description>A human-readable description of this excluded activity.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <define-field name="role-id" as-type="NCName" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with this activity exclusion.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with this activity exclusion.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with this activity exclusion.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <!-- ********** RESULTS Assembly ********** -->
   <define-assembly name="results">
      <formal-name>Assessment Results</formal-name>
      <description>Used by the assessment results and POA&amp;M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&amp;M, this identifies initial and residual risks, deviations, and disposition.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Results Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given set of results across revisions.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="1" max-occurs="1" as-type="markup-line">
            <formal-name>Results Title</formal-name>
            <description>The title for this set of results.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Results Description</formal-name>
            <description>A human-readable description of this set of test results.</description>
         </define-field>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <define-field name="start"
                       as-type="dateTime-with-timezone"
                       min-occurs="1"
                       max-occurs="1">
            <formal-name>start field</formal-name>
            <description>Date/time stamp identifying the start of the evidence collection reflected in these results.</description>
         </define-field>
         <define-field name="end"
                       as-type="dateTime-with-timezone"
                       min-occurs="1"
                       max-occurs="1">
            <formal-name>end field</formal-name>
            <description>Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.</description>
         </define-field>
         <assembly ref="finding" min-occurs="1" max-occurs="unbounded">
            <group-as name="findings" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="finding">
      <formal-name>Finding</formal-name>
      <description>Describes an individual finding.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Finding Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given finding across revisions.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="1" as-type="markup-line">
            <formal-name>Finding Title</formal-name>
            <description>The title for this finding.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Finding Description</formal-name>
            <description>A human-readable description of this finding.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
            <remarks>
               <!-- QUESTION: Is this remark appropriate here? -->
               <p>For the FedRAMP SAR, must have prop @name='priority' @ns='https://fedramp.gov/ns/oscal', with a numeric value, where '1' is the highest priority.</p>
            </remarks>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="origination" min-occurs="0" max-occurs="1">
            <!-- CHANGE: moved in sequence -->
         </assembly>
         <define-field name="collected" as-type="dateTime-with-timezone" min-occurs="1" max-occurs="1">
            <formal-name>collected field</formal-name>
            <description>Date/time stamp identifying when the finding information was collected.</description>
         </define-field>
         <define-field name="expires" as-type="dateTime-with-timezone" min-occurs="0" max-occurs="1">
            <formal-name>expires field</formal-name>
            <description>Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.</description>
         </define-field>
         <assembly ref="objective-status" min-occurs="0" max-occurs="1"/>
         <field ref="implementation-statement-uuid" min-occurs="0" max-occurs="1"/>
         <assembly ref="observation" min-occurs="0" max-occurs="unbounded">
            <group-as name="observations" in-json="ARRAY"/>
         </assembly>
         <field ref="threat-id" min-occurs="0" max-occurs="unbounded">
            <group-as name="threat-ids" in-json="ARRAY"/>
         </field>
         <assembly ref="risk" min-occurs="0" max-occurs="unbounded">
            <group-as name="risks" in-json="ARRAY"/>
         </assembly>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>The person who collected the evidence or made the observation.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="implementation-statement-uuid" as-type="uuid">
      <formal-name>Implementation Statement UUID</formal-name>
      <description>Identifies the implementation statement in the SSP to which this finding is related.</description>
   </define-field>
   <define-field name="date-time-stamp" as-type="dateTime-with-timezone">
      <formal-name>Date/Time Stamp</formal-name>
      <description>Date/time stamp of the associated information.</description>
   </define-field>
   
   <define-field name="collected" as-type="dateTime-with-timezone">
      <formal-name>Date/Time Collected</formal-name>
      <description>Date/time stamp identifying when the information was collected.</description>
   </define-field>
   
   <define-field name="expires" as-type="dateTime-with-timezone">
      <formal-name>Date/Time Expires</formal-name>
      <description>Date/time identifying when the information expires. Typically used with continuous assessment scenarios.</description>
   </define-field>
   
   <define-assembly name="objective-status">
      <formal-name>Objective Status</formal-name>
      <description>Captures an assessor's conclusions regarding the degree to which an objective is satisfied.</description>
      <flag ref="objective-id"/>
      <flag ref="control-id"/>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Objective Status Title</formal-name>
            <description>The title for this objective status.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="0" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Objective Status Description</formal-name>
            <description>A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="result" min-occurs="0" max-occurs="1"/>
         <field ref="implementation-status" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="result">
      <formal-name>Result</formal-name>
      <description>A brief indication as to whether the objective is satisfied or not.</description>
      <!-- QUESTION: What should the json value key be? -->
      <flag ref="system"/>
   </define-field>
   <define-field name="implementation-status">
      <formal-name>Implementation Status</formal-name>
      <description>Identifies the implementation status of the control or control objective.</description>
      <!-- QUESTION: What are the valid values? -->
      <json-value-key>status</json-value-key>
      <flag ref="system"/>
   </define-field>
   <define-flag name="system" as-type="uri">
      <formal-name>Assessment System</formal-name>
      <description>Identifies the framework or rules to which this value conforms.</description>
      <!-- QUESTION: Why is this needed? Is there a better way? -->
      <constraint>
         <allowed-values allow-other="yes">
            <enum value="https://fedramp.gov">The value conforms to FedRAMP definitions.</enum>
            <enum value="https://www.nist.gov">A value conforms to NIST definitions.</enum>
         </allowed-values>
      </constraint>
   </define-flag>
   
   <define-assembly name="observation">
      <formal-name>Objective</formal-name>
      <description>Describes an individual observation.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Observation Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given observation across revisions.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Observation Title</formal-name>
            <description>The title for this observation.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER"
            as-type="markup-multiline">
            <formal-name>Observaton Description</formal-name>
            <description>A human-readable description of this assessment observation.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="observation-method" min-occurs="1" max-occurs="unbounded">
            <group-as name="observation-methods" in-json="ARRAY"/>
         </field>
         <field ref="observation-type" min-occurs="0" max-occurs="unbounded">
            <group-as name="observation-types" in-json="ARRAY"/>
         </field>
         <field ref="assessor" min-occurs="0" max-occurs="unbounded">
            <group-as name="assessors" in-json="ARRAY"/>
         </field>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Identifies who was interviewed, or what was tested or inspected.</p>
            </remarks>
         </assembly>
         <define-field name="origin" min-occurs="0" max-occurs="unbounded">
            <formal-name>origin field</formal-name>
            <description>Identifies the source of the finding, such as a tool, interviewed person,
               or activity.</description>
            <group-as name="origins" in-json="ARRAY"/>
            <flag ref="uuid-ref" required="yes"/>
            <define-flag name="type" required="yes">
               <formal-name>type flag</formal-name>
               <description>type flag ... </description>
               <constraint>
                  <allowed-values allow-other="no">
                     <enum value="tool">An assessment tool, defined in the assets section of the
                        assessment plan or results.</enum>
                     <enum value="test-method">A test method defined in the assessment-activities
                        section of the assessment plan or results.</enum>
                     <enum value="task">A task defined in the schedule of the assessment plan or
                        results.</enum>
                     <enum value="included-activity">An assessment activity defined in the
                        assessment-activities section of the assessment plan or results.</enum>
                     <enum value="other">The UUID points elsewhere in the this file or an imported
                        file.</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
         <!-- CHANGE: group-as name from evidence-group to relevant-evidence-group         -->
         <assembly ref="relevant-evidence" min-occurs="0" max-occurs="unbounded">
            <group-as name="relevant-evidence-group" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="relevant-evidence">
      <formal-name>Relevant Evidence</formal-name>
      <description>Links this observation to relevant evidence.</description>
      <define-flag name="href" required="no" as-type="uri-reference">
         <formal-name>Relevant Evidence Reference</formal-name>
         <description>>A resolvable URL reference to relevant evidence.</description>
         <remarks>
            <p>The value of the <code>href</code> can be an internet resource, or a local reference using a fragment e.g. #fragment that points to a <code>back-matter</code> <code>resource</code> in the same document.</p>
            <!-- TODO: Add a link to "within the scope of the containing OSCAL document" to point to documentation of identification scopes" -->
            <p>If a local reference using a fragment is used, this will be indicated by a fragment "#" followed by an identifier which references an identified <code>resource</code> in the document's <code>back-matter</code> or another object that is within the scope of the containing OSCAL document.</p>
            <p>If an internet resource is used, the <code>href</code> value will be an absolute or relative URI pointing to the location of the referenced resource. A relative URI will be resolved relative to the location of the document containing the link.</p>
         </remarks>
      </define-flag>
      <model>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Relevant Evidence Description</formal-name>
            <description>A human-readable description of this evidence.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="assessor">
      <formal-name>Assessor</formal-name>
      <description>Identifies an individual who gathered the evidence resulting in the observation or risk identification.</description>
      <!-- QUESTION: What is the json value key? Also, why not use responsible-party? -->
      <define-flag name="party-uuid" required="yes">
         <formal-name>Party UUID</formal-name>
         <description>The UUID of the assessor who collected the evidence or made the observation.</description>
      </define-flag>
   </define-field>
   
   <define-field name="origin">
      <formal-name>Origin</formal-name>
      <description>Identifies the tool or activity that resulted in the observation.</description>
      <!-- QUESTION: What is the json value key? -->
      <flag ref="uuid-ref" required="yes"/>
      <define-flag name="type" required="yes">
         <!-- TODO: This documentation needs to be improved -->
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="no">
               <enum value="tool">An assessment tool, defined in the assets section of the assessment plan or results.</enum>
               <enum value="test-method">A test method defined in the assessment-activities section of the assessment plan or results.</enum>
               <enum value="task">A task defined in the schedule of the assessment plan or results.</enum>
               <enum value="included-activity">An assessment activity defined in the assessment-activities section of the assessment plan or results.</enum>
               <enum value="other">The UUID points elsewhere in the this file or an imported file.</enum>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-flag name="uuid-ref" as-type="uuid">
      <formal-name>UUID Reference</formal-name>
      <description>A pointer to a relevant item, using it's UUID.</description>
   </define-flag>
   <define-field name="observation-method">
      <formal-name>Observation Method</formal-name>
      <description>Identifies how the observation was made.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="EXAMINE">An inspection was performed.</enum>
            <enum value="INTERVIEW">An interview was performed.</enum>
            <enum value="TEST">A manual or automated test was performed.</enum>
            <enum value="TEST-MANUAL">A manual test was performed.</enum>
            <enum value="TEST-AUTOMATED">An automated test was performed.</enum>
            <enum value="MIXED">Only use for historic conversion of old assessment observations that may include a mix of methods.</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="observation-type">
      <formal-name>Observation Type</formal-name>
      <description>Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="ssp-statement-issue">A difference between the SSP implementation statement, and actual implementation.</enum>
            <enum value="control-objective">An observation about the status of a the associated control objective.</enum>
            <enum value="mitigation">A mitigating factor was identified.</enum>
            <enum value="finding">An assessment finding. Used for observations made by tools, penetration testing, and other means.</enum>
            <enum value="historic">An observation from a past assessment, which was converted to OSCAL at a later date.</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="threat-id">
      <formal-name>Threat ID</formal-name>
      <description>A pointer, by ID, to an externally-defined threat.</description>
      <define-flag name="system" required="yes">
         <formal-name>Threat Type Identification System</formal-name>
         <description>Specifies the source of the threat information.</description>
         <!-- QUESTION: What is the json value key? -->
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="https://fedramp.gov">The value conforms to FedRAMP definitions.</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="uri" as-type="uri" required="no">
         <formal-name>URI</formal-name>
         <description>An optional location for the threat data, from which this ID originates.</description>
      </define-flag>
   </define-field>
   
   <define-assembly name="risk">
      <formal-name>Identified Risk</formal-name>
      <description>An identified risk.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Risk Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given risk across revisions.</description>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="1" max-occurs="1" as-type="markup-line">
            <formal-name>Risk Title</formal-name>
            <description>The title for this risk.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Risk Description</formal-name>
            <description>A human-readable description of this risk.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="risk-metric" min-occurs="0" max-occurs="unbounded">
            <group-as name="risk-metrics" in-json="ARRAY"/>
         </field>
         <field ref="risk-statement" min-occurs="1" max-occurs="1"/>
         <assembly ref="mitigating-factor" min-occurs="0" max-occurs="unbounded">
            <group-as name="mitigating-factors" in-json="ARRAY"/>
         </assembly>
         <field ref="remediation-deadline" min-occurs="0" max-occurs="1"/>
         <assembly ref="remediation" min-occurs="0" max-occurs="unbounded">
            <group-as name="remediation-group" in-json="ARRAY"/>
         </assembly>
         <field ref="risk-status" min-occurs="1" max-occurs="1"/>
         <field ref="closure-actions" min-occurs="0" max-occurs="1"/>
         <assembly ref="remediation-tracking" min-occurs="0" max-occurs="1"/>
         <!-- ** (PROP) PRIORITY NEEDS TO BE ADDRESSED HERE, NOT ELSEWHERE ** -->
         <field ref="party-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="party-uuids" in-json="ARRAY"/>
         </field>
      </model>
      <remarks>
         <p>For the FedRAMP SAR, must have prop @name='risk-reduction-auto-approve' @ns='fedramp', with a value of "yes" or "no". If missing, or no value, the default is "no".</p>
      </remarks>
   </define-assembly>
   <define-field name="remediation-deadline" as-type="dateTime-with-timezone">
      <formal-name>Remediation Deadline</formal-name>
      <description>The date/time by which the risk must be closed.</description>
   </define-field>
   <define-field name="risk-metric">
      <formal-name>Risk Metric</formal-name>
      <description>An individual risk metric from a specified system.</description>
      <!-- QUESTION: What is the json value key? -->
      <define-flag name="name" required="yes">
         <!-- TODO: this documentation needs to be improved -->
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="impacted-control">Impacted Control</enum>
               <enum value="vulnerability-id">Vulnerability ID</enum>
               <enum value="source-id">Source ID</enum>
               <!-- Risk Metrics -->
               <enum value="likelihood">Likelihood</enum>
               <enum value="impact">Impact</enum>
               <enum value="risk">Risk</enum>
               <!-- CVSS Metrics Values -->
               <enum value="AV">Access Vector</enum>
               <enum value="AC">Access Complexity</enum>
               <enum value="Au">Authentication</enum>
               <enum value="C">Confidentiality Impact</enum>
               <enum value="I">Integrity Impact</enum>
               <enum value="A">Availability Impact</enum>
               <enum value="RL">Remediation Level</enum>
               <enum value="RC">Report Confidence</enum>
               <enum value="CDP">Collateral Damage Potential</enum>
               <enum value="TD">Target Distribution</enum>
               <enum value="CR">Confidentiality Requirement</enum>
               <enum value="IR">Integrity Requirement</enum>
               <enum value="AR">Availability Requirement</enum>
               <enum value="PR">Privileges Required</enum>
               <enum value="UI">User Interaction</enum>
               <enum value="S">Scope</enum>
               <enum value="E">Exploit Maturity</enum>
               <enum value="MAV">Modified Attack Vector</enum>
               <enum value="MAC">Modified Attack Complexity</enum>
               <enum value="MPR">Modified Privileges Required</enum>
               <enum value="MUI">Modified User Interaction</enum>
               <enum value="MS">Modified Scope</enum>
               <enum value="MC">Modified Confidentiality</enum>
               <enum value="MI">Modified Integrity</enum>
               <enum value="MA">Modified Availability</enum>
               <enum value="access-vector">Access Vector</enum>
               <enum value="access-complexity">Access Complexity</enum>
               <enum value="authentication">Authentication</enum>
               <enum value="confidentiality-impact">Confidentiality Impact</enum>
               <enum value="integrity-impact">Integrity Impact</enum>
               <enum value="availability-impact">Availability Impact</enum>
               <enum value="exploitability">Exploitability</enum>
               <enum value="remediation-level">Remediation Level</enum>
               <enum value="report-confidence">Report Confidence</enum>
               <enum value="collateral-damage-potential">Collateral Damage Potential</enum>
               <enum value="target-distribution">Target Distribution</enum>
               <enum value="confidentiality-requirement">Confidentiality Requirement</enum>
               <enum value="integrity-requirement">Integrity Requirement</enum>
               <enum value="availability-requirement">Availability Requirement</enum>
               <enum value="privileges-required">Privileges Required</enum>
               <enum value="user-interaction">User Interaction</enum>
               <enum value="scope">Scope</enum>
               <enum value="exploit-code-maturity">Exploit Code Maturity</enum>
               <enum value="modified-attack-vector">Modified Attack Vector</enum>
               <enum value="modified-attack-complexity">Modified Attack Complexity</enum>
               <enum value="modified-privileges-required">Modified Privileges Required</enum>
               <enum value="modified-user-interaction">Modified User Interaction</enum>
               <enum value="modified-scope">Modified Scope</enum>
               <enum value="modified-confidentiality">Modified Confidentiality</enum>
               <enum value="modified-integrity">Modified Integrity</enum>
               <enum value="modified-availability">Modified Availability</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="class">
         <formal-name>class flag</formal-name>
         <description>class flag ... </description>
         <constraint>
            <allowed-values allow-other="yes"><!-- For values related to initial and residual (mitigated) risk -->
               <enum value="initial">Initial</enum>
               <enum value="residual">Residual</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="system" as-type="string">
         <formal-name>System</formal-name>
         <description>Specifies the system represented by this risk metric.</description>
         <constraint>
            <allowed-values allow-other="yes"><!-- Other values -->
               <enum value="https://www.nist.gov"/>
               <enum value="https://fedramp.gov"/>
               <enum value="cve"/>
               <!-- To identify which CVSS values to use -->
               <enum value="CVSSv2"/>
               <enum value="CVSSv3"/>
               <enum value="CVSSv3.1"/>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-assembly name="remediation-tracking">
      <formal-name>Remediation Tracking</formal-name>
      <description>A log of events and actions taken towards the remediation of the associated risk.</description>
      <model>
         <assembly ref="tracking-entry" min-occurs="1" max-occurs="unbounded">
            <group-as name="tracking-entries" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   
   <define-assembly name="tracking-entry">
      <formal-name>Tracking Entry</formal-name>
      <description>Individual remediation tracking entry, which logs an event or action taken towards the remediation of the associated risk.</description>
      <define-flag name="uuid" required="no" as-type="uuid">
         <formal-name>Tracking Entry Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this tracking entry. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given tracking entry across revisions.</description>
      </define-flag>
      <define-flag name="type" required="no">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="vendor-check-in">Vendor Check-In</enum>
               <enum value="status-update">Status Update</enum>
               <enum value="milestone-complete">Milestone Complete</enum>
               <enum value="mitigation">Mitigation Implemented</enum>
               <enum value="remediated">Risk is Remediated</enum>
               <enum value="closed">Closed</enum>
               <enum value="dr-submission">Deviation Request Submission</enum>
               <enum value="dr-updated">Deviation Requested Updated</enum>
               <enum value="dr-approved">Deviation Request Approved</enum>
               <enum value="dr-rejected">Deviation Request Rejected</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <field ref="date-time-stamp" min-occurs="1" max-occurs="1"/>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Tracking Entry Title</formal-name>
            <description>The title for this tracking entry.</description>
         </define-field>
         <define-field name="description" min-occurs="1" max-occurs="1" as-type="markup-multiline" >
            <formal-name>Tracking Entry Description</formal-name>
            <description>A human-readable description of this tracking entry.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-assembly name="required">
      <formal-name>Required Asset</formal-name>
      <description>Identifies an asset required to achieve remediation.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Required Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given required asset across revisions.</description>
      </define-flag>
      <model>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Identifies an asset associated with this requirement, such as a party, system component, or inventory-item.</p>
            </remarks>
         </assembly>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line">
            <formal-name>Title for Required Asset</formal-name>
            <description>The title for this required asset.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Description of Required Asset</formal-name>
            <description>A human-readable description of this required asset.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="risk-status">
      <formal-name>Status</formal-name>
      <description>Describes the status of the associated risk.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="open">Open</enum>
            <enum value="closed">Closed</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="closure-actions" as-type="markup-multiline">
      <formal-name>Closer Actions</formal-name>
      <description>Describes the actions taken that resulted in the closure of the identified risk.</description>
   </define-field>
   
   <define-assembly name="mitigating-factor">
      <formal-name>Mitigating Factor</formal-name>
      <description>Describes a mitigating factor with an optional link to an implementation statement in the SSP.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Mitigating Factor Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given mitigating factor across revisions.</description>
      </define-flag>
      <flag ref="implementation-uuid" required="no"/>
      <model>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Mitigating Factor Description</formal-name>
            <description>A human-readable description of this mitigating factor.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Links identifiable elements of the system to this mitigating factor, such as an inventory-item or component.</p>
            </remarks>
         </assembly>
      </model>
   </define-assembly>
   
   <define-assembly name="remediation">
      <formal-name>Remediation</formal-name>
      <description>Describes either recommendation or an actual plan for remediating the risk.</description>
      <define-flag name="uuid" required="yes" as-type="uuid">
         <formal-name>Remediation Universally Unique Identifier</formal-name>
         <description>Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given remediation across revisions.</description>
      </define-flag>
      <define-flag name="type" required="no">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="recommendation">Recommended Remediation</enum>
               <enum value="planned">Planned Remediation</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="1" max-occurs="1" as-type="markup-line">
            <formal-name>Remediation Title</formal-name>
            <description>The title for this remediation activity.</description>
         </define-field>
         <!-- CHANGE: Added WITH_WRAPPER to description -->
         <define-field name="description" min-occurs="1" max-occurs="1" in-xml="WITH_WRAPPER" as-type="markup-multiline">
            <formal-name>Remediaiton Description</formal-name>
            <description>A human-readable description of this remediation plan.</description>
         </define-field>
         <field ref="property" min-occurs="0" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <define-field name="remediation-origin" min-occurs="0" max-occurs="unbounded">
            <formal-name>remediation-origin field</formal-name>
            <description>Points to the source of the recommendation</description>
            <!-- QUESTION: What is the json value key? -->
            <group-as name="origins" in-json="ARRAY"/>
            <flag ref="uuid-ref" required="yes"/>
            <define-flag name="type">
               <formal-name>type flag</formal-name>
               <description>type flag ... </description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="party">The UUID of the person or organization who made the recommendation</enum>
                     <enum value="tool">The UUID of the tool that made the recommendation</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
         <assembly ref="required" min-occurs="0" max-occurs="unbounded">
            <group-as name="requirements" in-json="ARRAY"/>
         </assembly>
         <assembly ref="schedule" min-occurs="0" max-occurs="1"/>
         <field ref="remarks" in-xml="WITH_WRAPPER" min-occurs="0" max-occurs="1"/>
      </model>
   </define-assembly>
   
   <define-field name="remediation-origin">
      <formal-name>Remediation Origin</formal-name>
      <description>Points to the source of the remediation recommendation or plan</description>
      <!-- QUESTION: What is the json value key? -->
      <flag ref="uuid-ref" required="yes"/>
      <define-flag name="type">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="party">The UUID of the person or organization who made the recommendation</enum>
               <enum value="tool">The UUID of the tool that made the recommendation</enum>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   
   <define-field name="risk-statement" as-type="markup-multiline">
      <formal-name>Risk Statement</formal-name>
      <description>Describes the risk.</description>
   </define-field>
   <define-flag name="implementation-uuid" as-type="uuid">
      <formal-name>Implementation UUID</formal-name>
      <description>Points to an implementation statement in the SSP.</description>
   </define-flag>
   <define-flag name="objective-id" as-type="NCName">
      <formal-name>Objective ID</formal-name>
      <description>Points to an assessment objective.</description>
   </define-flag>
   
   <define-assembly name="assessment-part">
      <!-- QUESTION: Is it confusing to use part here, given the control meaning of part? -->
      <formal-name>Assessment Part</formal-name>
      <description>A partition or component of an objective or part</description>
      <use-name>part</use-name>
      <define-flag name="uuid" as-type="uuid">
         <!-- CHANGE: from uuiid to uuid -->
         <formal-name>Part Identifier</formal-name>
         <description>A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.</description>
      </define-flag>
      <define-flag name="name" required="yes">
         <formal-name>Part Name</formal-name>
         <description>A textual label that uniquely identifies the part's semantic type.</description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="asset">An assessment asset.</enum>
               <enum value="method">An assessment method.</enum>
               <enum value="objective">Describes a set of control objectives.</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="ns" as-type="uri">
         <!-- CHANGED: data type to uri -->
         <formal-name>Part Namespace</formal-name>
         <description>A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.</description>
         <remarks>
            <p>Provides a means to segment the value space for the <code>name</code>, so that different organizations and individuals can assert control over the allowed names and associated text used in a part. This allows the semantics associated with a given name to be defined on an organization-by-organization basis.</p>
            <p>An organization MUST use a URI that they have control over. e.g., a domain registered to the organization in a URI, a registered uniform resource names (URN) namespace.</p>
            <p>When a <code>ns</code> is not provided, its value should be assumed to be <code>http://csrc.nist.gov/ns/oscal</code> and the name should be a name defined by the associated OSCAL model.</p>
         </remarks>
      </define-flag>
      <define-flag name="class" as-type="NCName">
         <formal-name>Part Class</formal-name>
         <description>A textual label that provides a sub-type or characterization of the part's <code>name</code>. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same <code>name</code> and <code>ns</code>.</description>
         <remarks>
            <p>A <code>class</code> can be used in validation rules to express extra constraints over named items of a specific <code>class</code> value.</p>
            <p>A <code>class</code> can also be used in an OSCAL profile as a means to target an alteration to control content.</p>
         </remarks>
      </define-flag>
      <model>
         <define-field name="title" min-occurs="0" max-occurs="1" as-type="markup-line" >
            <formal-name>Part Title</formal-name>
            <description>A name given to the part, which may be used by a tool for display and navigation.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <define-field name="prose" as-type="markup-multiline" in-xml="UNWRAPPED" min-occurs="1">
            <formal-name>Part Text</formal-name>
            <description>Permits multiple paragraphs, lists, tables etc.</description>
         </define-field>
         <assembly ref="assessment-part" max-occurs="unbounded">
            <group-as name="parts" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <any/>
      </model>
      <constraint>
         <require when="@name='assessment'">
            <allowed-values target="prop/@name" allow-other="yes">
               <enum value="method">The assessment method to use. This typically appears on parts with the name "assessment".</enum>
            </allowed-values>
            <has-cardinality target="prop[@name='method']" min-occurs="1"/>
            <allowed-values target="prop[@name='method']/value()">
               <enum value="INTERVIEW">The process of holding discussions with individuals or groups of individuals within an organization to once again, facilitate assessor understanding, achieve clarification, or obtain evidence.</enum>
               <enum value="EXAMINE">The process of reviewing, inspecting, observing, studying, or analyzing one or more assessment objects (i.e., specifications, mechanisms, or activities).</enum>
               <enum value="TEST">The process of exercising one or more assessment objects (i.e., activities or mechanisms) under specified conditions to compare actual with expected behavior.</enum>
            </allowed-values>
         </require>
      </constraint>
      <remarks>
         <p>A <code>part</code> provides for logical partitioning of prose, and can be thought of as a grouping structure (e.g., section). A <code>part</code> can have child parts allowing for arbitrary nesting of prose content (e.g., statement hierarchy). A <code>part</code> can contain <code>prop</code> objects that allow for enriching prose text with structured name/value information.</p>
         <p>A <code>part</code> can be assigned an optional <code>id</code>, which allows for internal and external references to the textual concept contained within a <code>part</code>. A <code>id</code> provides a means for an OSCAL profile, or a higher layer OSCAL model to reference a specific part within a <code>catalog</code>. For example, an <code>id</code> can be used to reference or to make modifications to a control statement in a profile.</p>
         <p>Use of <code>part</code> and <code>prop</code> provides for a wide degree of extensibility within the OSCAL catalog model. The optional <code>ns</code> provides a means to qualify a part's <code>name</code>, allowing for organization-specific vocabularies to be defined with clear semantics. Any organization that extends OSCAL in this way should consistently assign a <code>ns</code> value that represents the organization, making a given namespace qualified <code>name</code> unique to that organization. This allows the combination of <code>ns</code> and <code>name</code> to always be unique and unambiguous, even when mixed with extensions from other organizations. Each organization is responsible for governance of their own extensions, and is strongly encouraged to publish their extensions as standards to their user community. If no <code>ns</code> is provided, the name is expected to be in the "OSCAL" namespace.</p>
         <p>To ensure a <code>ns</code> is unique to an organization and naming conflicts are avoided, a URI containing a DNS or other globally defined organization name should be used. For example, if FedRAMP and DoD both extend OSCAL, FedRAMP will use the <code>ns</code> "https://fedramp.gov", while DoD will use the <code>ns</code> "https://defense.gov" for any organization specific <code>name</code>.</p>
         <p>Tools that process OSCAL content are not required to interpret unrecognized OSCAL extensions; however, OSCAL-compliant tools should not modify or remove unrecognized extensions, unless there is a compelling reason to do so, such as data sensitivity.</p>
      </remarks>
   </define-assembly>
   
</METASCHEMA>
