<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../build/metaschema/toolchains/xslt-M4/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<!DOCTYPE METASCHEMA [
   <!ENTITY allowed-values-responsible-roles-operations SYSTEM "shared-constraints/allowed-values-responsible-roles-operations.ent">
   <!ENTITY allowed-values-responsible-roles-component-production SYSTEM "shared-constraints/allowed-values-responsible-roles-component-production.ent">
]>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
      xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/toolchains/xslt-M4/validate/metaschema.xsd">
   <schema-name>OSCAL Implementation Component Format</schema-name>
   <schema-version>1.0.0-milestone3</schema-version>
   <short-name>oscal-component</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <remarks>
      <p>The OSCAL Implementation Component format can be used to describe the implementation of controls in a <code>component</code> or a set of components grouped as a <code>capability</code>. A component can be either a <em>technical component</em>, or a <em>documentary component</em>. A technical component is a component that is implemented in hardware (physical or virtual) or software. A documentary component is a component implemented in a document, such as a process, procedure, or policy.</p>
      <p>The root of the OSCAL Implementation Component format is <code>component-definition</code>.</p>
      <p>NOTE: This documentation is a work in progress. As a result, documentation for many of the information elements is missing or incomplete.</p>
   </remarks>
   <import href="oscal_implementation-common_metaschema.xml"/>
   <define-assembly name="component-definition">
      <formal-name>Component Definition</formal-name>
      <description>A collection of component descriptions, which may optionally be grouped by capability.</description>
      <root-name>component-definition</root-name>
      <define-flag name="uuid" as-type="uuid" required="yes">
         <formal-name>Catalog Universally Unique Identifier</formal-name>
         <description>A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.</description>
      </define-flag>
      <model>
         <assembly ref="metadata" min-occurs="1"/>
         <field ref="import-component-definition" max-occurs="unbounded">
            <group-as name="import-component-definitions" in-json="ARRAY"/>
         </field>
         <assembly ref="component" max-occurs="unbounded">
            <group-as name="components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="capability" max-occurs="unbounded">
            <group-as name="capabilities" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="back-matter"/>
      </model>
      <constraint>
         <index name="index-system-component-uuid" target="component">
            <key-field target="@uuid"/>
         </index>
      </constraint>
   </define-assembly>
   <define-field name="import-component-definition" as-type="empty">
      <formal-name>Import Component Definition</formal-name>
      <description>Loads a component definition from another resource.</description>
      <define-flag name="href" as-type="uri-reference" required="yes">
         <formal-name>Hyperlink Reference</formal-name>
         <description>A link to a resource that defines a set of components and/or capabilities to import into this collection.</description>
      </define-flag>
   </define-field>
   <define-assembly name="component">
      <formal-name>Component</formal-name>
      <description>A defined component that can be part of an implemented system.</description>
      <json-key flag-name="uuid"/>
      <define-flag required="yes" name="uuid">
         <formal-name>Component Identifier</formal-name>
         <description>The unique identifier for the component.</description>
      </define-flag>
      <!-- CHANGE: removed "name" -->
      <flag ref="component-type" required="yes"/>
      <model>
         <define-field name="title" as-type="markup-line" min-occurs="1">
            <formal-name>Component Title</formal-name>
            <description>A human readable name for the component.</description>
         </define-field>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Component Description</formal-name>
            <description>A description of the component, including information about its function.</description>
         </define-field>
         <define-field name="purpose" as-type="markup-line">
            <formal-name>Purpose</formal-name>
            <description>A summary of the technological or business purpose of the component.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </assembly>
         <assembly ref="responsible-role" max-occurs="unbounded">
            <!-- CHANGE: from responsible-party to responsible-role -->
            <group-as name="responsible-roles" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="protocol" max-occurs="unbounded"><!-- TODO: protocol (tcp/UDP), port range, service name, purpose, used by -->
            <group-as name="protocols" in-json="ARRAY"/>
            <remarks>
               <p>Used for <code>service</code> components to define the protocols supported by the service.</p>
            </remarks>
         </assembly>
<!--      
      <assembly ref="proof-of-compliance" max-occurs="unbounded">
        <group-as name="proofs-of-compliance" />
      </assembly>
-->
         <assembly ref="control-implementation" max-occurs="unbounded">
            <group-as name="control-implementations" in-json="ARRAY"/>
         </assembly>
<!--
      <assembly ref="supported-profile" max-occurs="unbounded">
        <group-as name="supported-profiles" />
      </assembly>
-->
<!--
      <assembly ref="configuration" max-occurs="unbounded">
        <group-as name="configurations" in-json="BY_KEY" />
      </assembly>
      <assembly ref="artifact" max-occurs="unbounded">
        <group-as name="artifacts" in-json="BY_KEY" />
      </assembly>
-->
         <field ref="remarks"/>
      </model>
      <constraint>
         <allowed-values target="prop/@name" allow-other="yes">
            <!-- ========================================================================================================== -->
            <!-- = Changes to the following values need to be synced with component in the SSP and component metaschemas. = -->
            <!-- ========================================================================================================== -->
            <enum value="version">The version of the component.</enum>
            <enum value="patch-level">The specific patch level of the component.</enum>
            <enum value="model">The model of the component.</enum>
            <!-- CHANGE: @name="date-released" changed to @name="release-date" -->
            <enum value="release-date">The date the component was released, such as a software release date or policy publication date.</enum>
            <enum value="asset-type">Simple description of the component's function, such as Router, Storage Array, DNS Server.</enum>
         </allowed-values>

         <allowed-values target="annotation/@name" allow-other="yes">
            <!-- ========================================================================================================== -->
            <!-- = Changes to the following values need to be synced with component in the SSP and component metaschemas. = -->
            <!-- ========================================================================================================== -->
            <enum value="baseline-configuration-name">The name of the baseline configuration for the component.</enum>
            <enum value="allows-authenticated-scan">Can the component be check with an authenticated scan? (yes/no)</enum>
            <enum value="function">The function provided by the component for the system.</enum>
         </allowed-values>
         
         <allowed-values target="link/@rel" allow-other="yes">
            <!-- ========================================================================================================== -->
            <!-- = Changes to the following values need to be synced with component in the SSP and component metaschemas. = -->
            <!-- ========================================================================================================== -->
            <enum value="depends-on">A reference to another component that this component has a dependency on.</enum>
            <enum value="validated-by">A reference to another component of type=validation, that is a validation (e.g., FIPS 140-2) for this component</enum>
            <enum value="proof-of-compliance">A pointer to a validation record (e.g., FIPS 140-2) or other compliance information.</enum>
            <!-- rel values to also be allowed in implemented-component -->
            <enum value="baseline-template">A reference to the baseline template used to configure the asset.</enum>
            <enum value="uses-service">This service is used by the referenced component identifier.</enum>
            <enum value="system-security-plan">A link to the system security plan of the external system.</enum>
         </allowed-values>
         
         <allowed-values target="responsible-role/@role-id|control-implementation/implemented-requirement/responsible-role/@role-id||control-implementation/implemented-requirement/statement/responsible-role/@role-id" allow-other="yes">
            <!-- ========================================================================================================== -->
            <!-- = Changes to the following values need to be synced with component in the SSP and component metaschemas. = -->
            <!-- ========================================================================================================== -->
            &allowed-values-responsible-roles-operations;
            &allowed-values-responsible-roles-component-production;
         </allowed-values>
         
         <!-- ========================================================================================================== -->
         <!-- = Changes to the following values need to be synced with component in the SSP and component metaschemas. = -->
         <!-- ========================================================================================================== -->
         <allowed-values target="(.)[@component-type='software']/prop/@name" allow-other="yes">
            <enum value="software-identifier">If a "software" component-type, the identifier, such as a SWID tag, for the software component.</enum>
         </allowed-values>
         
         <matches target="prop[@name='release-date']/value()" datatype="date"/>
         
         <allowed-values target="annotation[@name='allows-authenticated-scan']/@value">
            <enum value="yes">The component allows an authenticated scan.</enum>
            <enum value="no">The component does not allow an authenticated scan.</enum>
         </allowed-values>
         <allowed-values target="(.)[@component-type='service']/link/@rel" allow-other="yes">
            <enum value="provided-by">This service is provided by the referenced component identifier.</enum>
         </allowed-values>
         
         <expect test="not(exists((.)[not(@component-type='service')]/protocol))"/>
      </constraint>
      <remarks>
         <p>Components may be products, services, APIs, policies, processes, plans, guidance, standards, or other tangible items that enable security and/or privacy.</p>
         <p>The <code>type</code> indicates which of these component types is represented.</p>
         <p>A group of components may be aggregated into a <code>capability</code>. For example, an account management capability that consists of an account management process, and a Lightweight Directory Access Protocol (LDAP) software implementation.</p>
         <p>Capabilities are expressed by combining one or more components.</p>
      </remarks>
   </define-assembly>
   <define-assembly name="capability">
      <formal-name>Capability</formal-name>
      <description>A grouping of other components and/or capabilities.</description>
      <json-key flag-name="uuid"/>
      <define-flag required="yes" name="uuid" as-type="uuid">
         <formal-name>Capability Identifier</formal-name>
         <description>A unique identifier for a capability.</description>
      </define-flag>
      <define-flag name="name" as-type="string" required="yes">
         <formal-name>Capability Name</formal-name>
         <description>The capability's human-readable name.</description>
      </define-flag>
      <model>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Capability Description</formal-name>
            <description>A summary of the capability.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships for:
          depends-on: component has a dependency on another component
          validated-by:, etc.
        -->
         </assembly>
         <assembly ref="incorporates-component" max-occurs="unbounded">
            <group-as name="incorporates-components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="control-implementation" max-occurs="unbounded">
            <group-as name="control-implementations" in-json="ARRAY"/>
         </assembly>
         <!--      <assembly ref="supported-profile" max-occurs="unbounded">
        <group-as name="supported-profiles" />
      </assembly>
-->
         <field ref="remarks"/>
      </model>
   </define-assembly>
   <define-assembly name="incorporates-component">
      <formal-name>Incorporates Component</formal-name>
      <description>TBD</description>
      <json-key flag-name="component-uuid"/>
      <define-flag required="yes" name="component-uuid" as-type="uuid">
         <formal-name>Component Reference</formal-name>
         <description>A reference to a component by its identifier</description>
      </define-flag>
      <model>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Component Description</formal-name>
            <description>A description of the component, including information about its function.</description>
         </define-field>
      </model>
   </define-assembly>

   <define-assembly name="control-implementation">
      <formal-name>Control Implementation Set</formal-name>
      <description>Defines how the component or capability supports a set of controls.</description>
      <define-flag name="uuid" required="yes">
         <formal-name>Control Implementation Set Identifier</formal-name>
         <description>A unique identifier for the set of implemented controls.</description>
      </define-flag>
      <flag ref="source" required="yes">
         <remarks>
            <p>A URL reference to the source catalog or profile for which this component is implementing controls for.</p>
         </remarks>
      </flag>
      <model>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Control Implementation Description</formal-name>
            <description>A description of how the spefied set of controls are implemented for the containing component or capability.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </assembly>
         <assembly ref="implemented-requirement" min-occurs="1" max-occurs="unbounded">
            <group-as name="implemented-requirements" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="implemented-requirement">
      <formal-name>Control Implementation</formal-name>
      <description>Describes how the containing component or capability implements an individual control.</description>
      <define-flag name="uuid" required="yes">
         <formal-name>Control Implementation Identifier</formal-name>
         <description>A unique identifier for a specific control implementation.</description>
      </define-flag>
      <flag ref="control-id"/>
      <model>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Control Implementation Description</formal-name>
            <description>A description of how the spefied control is implemented for the containing component or capability.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </assembly>
<!--
         <assembly ref="using"/>
-->
         <!-- TODO: Implement parameters -->
         <assembly ref="responsible-role" max-occurs="unbounded">
            <group-as name="responsible-roles" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="set-parameter" max-occurs="unbounded">
            <group-as name="set-parameters" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="statement" max-occurs="unbounded">
            <group-as name="statements" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks"/>
      </model>
   </define-assembly>
   <define-assembly name="statement">
      <formal-name>Control Statement Implementation</formal-name>
      <description>Identifies which statements within a control are addressed.</description>
      <json-key flag-name="statement-id"/>
      <flag ref="statement-id" required="yes">
         <remarks>
            <p>A reference to the specific implemented statement associated with a control.</p>
         </remarks>
      </flag>
      <define-flag name="uuid" required="yes">
         <formal-name>Control Statement Implementation Identifier</formal-name>
         <description>A unique identifier for a specific control implementation.</description>
      </define-flag>
      <model>
         <define-field name="description" as-type="markup-multiline" min-occurs="1" in-xml="WITH_WRAPPER">
            <formal-name>Statement Implementation Description</formal-name>
            <description>A summary of how the containing control statement is implemented by the component or capability.</description>
         </define-field>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <assembly ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </assembly>
         <!--            <assembly ref="using"/>
-->
         <!-- TODO: Implement parameters -->
         <assembly ref="responsible-role" max-occurs="unbounded">
            <group-as name="responsible-roles" in-json="BY_KEY"/>
         </assembly>
         <!--         <assembly ref="by-capability" max-occurs="unbounded">
            <group-as name="by-capabilities" in-json="BY_KEY"/>
         </assembly>
-->
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <!--
  <define-assembly name="supported-profile">
    <formal-name>Supported Profile</formal-name>
    <description>How the component supports a given baseline expressed as an OSCAL profile.</description>
    <flag ref="source" required="yes"/>
    <model>
      <field ref="description" min-occurs="1"/>
      <assembly ref="meets-requirement-set" max-occurs="unbounded">
        <group-as name="meets-requirement-sets"/>
      </assembly>
      <field ref="prop" max-occurs="unbounded">
        <group-as name="properties"/>
      </field>
      <field ref="link" max-occurs="unbounded">
        <group-as name="links"/>
        <!-\- TODO: Model specific link relationships -\->
      </field>
      <!-\- TODO: Implement parameters -\->
      <field ref="remarks"/>
    </model>
  </define-assembly>

  <define-assembly name="meets-requirement-set">
    <formal-name>Can Meet</formal-name>
    <description>Defines what sets of controls are supported by the component.</description>
    <flag ref="source" required="yes"/>
    <model>
      <assembly ref="requirement" min-occurs="1" max-occurs="unbounded">
        <group-as name="requirements"/>
      </assembly>
      <assembly ref="using"/>
    </model>
  </define-assembly>
-->
</METASCHEMA>
